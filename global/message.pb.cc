// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* JammerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JammerMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  JammerMessage_descriptor_ = file->message_type(0);
  static const int JammerMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JammerMessage, cpuutil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JammerMessage, gpuutil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JammerMessage, cpumemutil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JammerMessage, gpumemutil_),
  };
  JammerMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JammerMessage_descriptor_,
      JammerMessage::default_instance_,
      JammerMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(JammerMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JammerMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JammerMessage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JammerMessage_descriptor_, &JammerMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete JammerMessage::default_instance_;
  delete JammerMessage_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\"Y\n\rJammerMessage\022\017\n\007cpuU"
    "til\030\001 \001(\001\022\017\n\007gpuUtil\030\002 \001(\001\022\022\n\ncpuMemUtil"
    "\030\003 \001(\001\022\022\n\ngpuMemUtil\030\004 \001(\001b\006proto3", 114);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  JammerMessage::default_instance_ = new JammerMessage();
  JammerMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int JammerMessage::kCpuUtilFieldNumber;
const int JammerMessage::kGpuUtilFieldNumber;
const int JammerMessage::kCpuMemUtilFieldNumber;
const int JammerMessage::kGpuMemUtilFieldNumber;
#endif  // !_MSC_VER

JammerMessage::JammerMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JammerMessage)
}

void JammerMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

JammerMessage::JammerMessage(const JammerMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:JammerMessage)
}

void JammerMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cpuutil_ = 0;
  gpuutil_ = 0;
  cpumemutil_ = 0;
  gpumemutil_ = 0;
}

JammerMessage::~JammerMessage() {
  // @@protoc_insertion_point(destructor:JammerMessage)
  SharedDtor();
}

void JammerMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JammerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JammerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JammerMessage_descriptor_;
}

const JammerMessage& JammerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

JammerMessage* JammerMessage::default_instance_ = NULL;

JammerMessage* JammerMessage::New(::google::protobuf::Arena* arena) const {
  JammerMessage* n = new JammerMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JammerMessage::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<JammerMessage*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cpuutil_, gpumemutil_);

#undef ZR_HELPER_
#undef ZR_

}

bool JammerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JammerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double cpuUtil = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpuutil_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_gpuUtil;
        break;
      }

      // optional double gpuUtil = 2;
      case 2: {
        if (tag == 17) {
         parse_gpuUtil:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gpuutil_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_cpuMemUtil;
        break;
      }

      // optional double cpuMemUtil = 3;
      case 3: {
        if (tag == 25) {
         parse_cpuMemUtil:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpumemutil_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_gpuMemUtil;
        break;
      }

      // optional double gpuMemUtil = 4;
      case 4: {
        if (tag == 33) {
         parse_gpuMemUtil:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gpumemutil_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JammerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JammerMessage)
  return false;
#undef DO_
}

void JammerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JammerMessage)
  // optional double cpuUtil = 1;
  if (this->cpuutil() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->cpuutil(), output);
  }

  // optional double gpuUtil = 2;
  if (this->gpuutil() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->gpuutil(), output);
  }

  // optional double cpuMemUtil = 3;
  if (this->cpumemutil() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cpumemutil(), output);
  }

  // optional double gpuMemUtil = 4;
  if (this->gpumemutil() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gpumemutil(), output);
  }

  // @@protoc_insertion_point(serialize_end:JammerMessage)
}

::google::protobuf::uint8* JammerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JammerMessage)
  // optional double cpuUtil = 1;
  if (this->cpuutil() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->cpuutil(), target);
  }

  // optional double gpuUtil = 2;
  if (this->gpuutil() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->gpuutil(), target);
  }

  // optional double cpuMemUtil = 3;
  if (this->cpumemutil() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cpumemutil(), target);
  }

  // optional double gpuMemUtil = 4;
  if (this->gpumemutil() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gpumemutil(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:JammerMessage)
  return target;
}

int JammerMessage::ByteSize() const {
  int total_size = 0;

  // optional double cpuUtil = 1;
  if (this->cpuutil() != 0) {
    total_size += 1 + 8;
  }

  // optional double gpuUtil = 2;
  if (this->gpuutil() != 0) {
    total_size += 1 + 8;
  }

  // optional double cpuMemUtil = 3;
  if (this->cpumemutil() != 0) {
    total_size += 1 + 8;
  }

  // optional double gpuMemUtil = 4;
  if (this->gpumemutil() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JammerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const JammerMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const JammerMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JammerMessage::MergeFrom(const JammerMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.cpuutil() != 0) {
    set_cpuutil(from.cpuutil());
  }
  if (from.gpuutil() != 0) {
    set_gpuutil(from.gpuutil());
  }
  if (from.cpumemutil() != 0) {
    set_cpumemutil(from.cpumemutil());
  }
  if (from.gpumemutil() != 0) {
    set_gpumemutil(from.gpumemutil());
  }
}

void JammerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JammerMessage::CopyFrom(const JammerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JammerMessage::IsInitialized() const {

  return true;
}

void JammerMessage::Swap(JammerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JammerMessage::InternalSwap(JammerMessage* other) {
  std::swap(cpuutil_, other->cpuutil_);
  std::swap(gpuutil_, other->gpuutil_);
  std::swap(cpumemutil_, other->cpumemutil_);
  std::swap(gpumemutil_, other->gpumemutil_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JammerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JammerMessage_descriptor_;
  metadata.reflection = JammerMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JammerMessage

// optional double cpuUtil = 1;
void JammerMessage::clear_cpuutil() {
  cpuutil_ = 0;
}
 double JammerMessage::cpuutil() const {
  // @@protoc_insertion_point(field_get:JammerMessage.cpuUtil)
  return cpuutil_;
}
 void JammerMessage::set_cpuutil(double value) {
  
  cpuutil_ = value;
  // @@protoc_insertion_point(field_set:JammerMessage.cpuUtil)
}

// optional double gpuUtil = 2;
void JammerMessage::clear_gpuutil() {
  gpuutil_ = 0;
}
 double JammerMessage::gpuutil() const {
  // @@protoc_insertion_point(field_get:JammerMessage.gpuUtil)
  return gpuutil_;
}
 void JammerMessage::set_gpuutil(double value) {
  
  gpuutil_ = value;
  // @@protoc_insertion_point(field_set:JammerMessage.gpuUtil)
}

// optional double cpuMemUtil = 3;
void JammerMessage::clear_cpumemutil() {
  cpumemutil_ = 0;
}
 double JammerMessage::cpumemutil() const {
  // @@protoc_insertion_point(field_get:JammerMessage.cpuMemUtil)
  return cpumemutil_;
}
 void JammerMessage::set_cpumemutil(double value) {
  
  cpumemutil_ = value;
  // @@protoc_insertion_point(field_set:JammerMessage.cpuMemUtil)
}

// optional double gpuMemUtil = 4;
void JammerMessage::clear_gpumemutil() {
  gpumemutil_ = 0;
}
 double JammerMessage::gpumemutil() const {
  // @@protoc_insertion_point(field_get:JammerMessage.gpuMemUtil)
  return gpumemutil_;
}
 void JammerMessage::set_gpumemutil(double value) {
  
  gpumemutil_ = value;
  // @@protoc_insertion_point(field_set:JammerMessage.gpuMemUtil)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
